"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChatBot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _awsAmplify = require("aws-amplify");

var _AmplifyUI = require("../AmplifyUI");

var _AmplifyTheme = require("../AmplifyTheme");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
    itemMe: {
        padding: 10,
        fontSize: 12,
        color: 'gray',
        marginTop: 4,
        textAlign: 'right'
    },
    itemBot: {
        fontSize: 12,
        textAlign: 'left'
    },
    list: {
        height: '300px',
        overflow: 'auto'
    },
    textInput: Object.assign({}, _AmplifyTheme.Input, {
        display: 'inline-block',
        width: 'calc(100% - 90px - 15px)'
    }),
    button: Object.assign({}, _AmplifyTheme.Button, {
        width: '90px',
        float: 'right'
    })
};

var ChatBot = exports.ChatBot = function (_Component) {
    _inherits(ChatBot, _Component);

    function ChatBot(props) {
        _classCallCheck(this, ChatBot);

        var _this = _possibleConstructorReturn(this, (ChatBot.__proto__ || Object.getPrototypeOf(ChatBot)).call(this, props));

        _this.state = {
            dialog: [{
                message: _this.props.welcomeMessage || 'Welcome to Lex',
                from: 'system'
            }],
            inputText: ''
        };
        _this.changeInputText = _this.changeInputText.bind(_this);
        _this.listItems = _this.listItems.bind(_this);
        _this.submit = _this.submit.bind(_this);

        _this.listItemsRef = _react2.default.createRef();
        return _this;
    }

    _createClass(ChatBot, [{
        key: "listItems",
        value: function listItems() {
            return this.state.dialog.map(function (m, i) {
                if (m.from === 'me') {
                    return _react2.default.createElement(
                        "div",
                        { key: i, style: styles.itemMe },
                        m.message
                    );
                } else if (m.from === 'system') {
                    return _react2.default.createElement(
                        "div",
                        { key: i, style: styles.itemBot },
                        m.message
                    );
                } else {
                    return _react2.default.createElement(
                        "div",
                        { key: i, style: styles.itemBot },
                        m.message
                    );
                }
            });
        }
    }, {
        key: "submit",
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
                var _this2 = this;

                var response;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                e.preventDefault();

                                if (this.state.inputText) {
                                    _context.next = 3;
                                    break;
                                }

                                return _context.abrupt("return");

                            case 3:
                                _context.next = 5;
                                return new Promise(function (resolve) {
                                    return _this2.setState({
                                        dialog: [].concat(_toConsumableArray(_this2.state.dialog), [{ message: _this2.state.inputText, from: 'me' }])
                                    }, resolve);
                                });

                            case 5:
                                _context.next = 7;
                                return _awsAmplify.Interactions.send(this.props.botName, this.state.inputText);

                            case 7:
                                response = _context.sent;
                                _context.next = 10;
                                return this.setState({
                                    dialog: [].concat(_toConsumableArray(this.state.dialog), [response && { from: 'bot', message: response.message }]),
                                    inputText: ''
                                });

                            case 10:
                                this.listItemsRef.current.scrollTop = this.listItemsRef.current.scrollHeight;

                            case 11:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function submit(_x) {
                return _ref.apply(this, arguments);
            }

            return submit;
        }()
    }, {
        key: "changeInputText",
        value: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.setState({ inputText: event.target.value });

                            case 2:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function changeInputText(_x2) {
                return _ref2.apply(this, arguments);
            }

            return changeInputText;
        }()
    }, {
        key: "getOnComplete",
        value: function getOnComplete(fn) {
            var _this3 = this;

            return function () {
                var clearOnComplete = _this3.props.clearOnComplete;

                var message = fn.apply(undefined, arguments);

                _this3.setState({
                    dialog: [].concat(_toConsumableArray(!clearOnComplete && _this3.state.dialog), [message && { from: 'bot', message: message }]).filter(Boolean)
                }, function () {
                    _this3.listItemsRef.current.scrollTop = _this3.listItemsRef.current.scrollHeight;
                });
            };
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _props = this.props,
                onComplete = _props.onComplete,
                botName = _props.botName;


            if (onComplete && botName) {
                _awsAmplify.Interactions.onComplete(botName, this.getOnComplete(onComplete, this));
            }
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
            var _props2 = this.props,
                onComplete = _props2.onComplete,
                botName = _props2.botName;


            if (botName && this.props.onComplete !== prevProps.onComplete) {
                _awsAmplify.Interactions.onComplete(botName, this.getOnComplete(onComplete, this));
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _props3 = this.props,
                title = _props3.title,
                theme = _props3.theme,
                onComplete = _props3.onComplete;


            return _react2.default.createElement(
                _AmplifyUI.FormSection,
                { theme: theme },
                title && _react2.default.createElement(
                    _AmplifyUI.SectionHeader,
                    { theme: theme },
                    _awsAmplify.I18n.get(title)
                ),
                _react2.default.createElement(
                    _AmplifyUI.SectionBody,
                    { theme: theme },
                    _react2.default.createElement(
                        "div",
                        { ref: this.listItemsRef, style: styles.list },
                        this.listItems()
                    )
                ),
                _react2.default.createElement(
                    _AmplifyUI.SectionFooter,
                    { theme: theme },
                    _react2.default.createElement(
                        "form",
                        { onSubmit: this.submit },
                        _react2.default.createElement("input", {
                            style: styles.textInput,
                            type: "text",
                            placeholder: _awsAmplify.I18n.get("Type your message here"),
                            onChange: this.changeInputText,
                            value: this.state.inputText }),
                        _react2.default.createElement(
                            "button",
                            { type: "submit", style: styles.button },
                            _awsAmplify.I18n.get('Send')
                        )
                    )
                )
            );
        }
    }]);

    return ChatBot;
}(_react.Component);

ChatBot.defaultProps = {
    title: '',
    botName: '',
    onComplete: undefined,
    clearOnComplete: false
};

exports.default = ChatBot;